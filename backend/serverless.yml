service: task-management-api

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-2'}
  profile: task-app
  deploymentBucket:
    name: troystaskbucket
    blockPublicAccess: false
  environment:
    NODE_ENV: ${self:provider.stage}
    TASKS_TABLE: ${self:service}-${self:provider.stage}-tasks
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [TasksTable, Arn]

functions:
  api:
    handler: src/lambda.handler
    environment:
      NODE_ENV: ${self:provider.stage}
      TASKS_TABLE: ${self:service}-${self:provider.stage}-tasks
    events:
      - http:
          path: /api/tasks
          method: get
          cors: true
      - http:
          path: /api/tasks/{id}
          method: get
          cors: true
      - http:
          path: /api/tasks
          method: post
          cors: true
      - http:
          path: /api/tasks/{id}
          method: put
          cors: true
      - http:
          path: /api/tasks/{id}
          method: delete
          cors: true
      - http:
          path: /health
          method: get
          cors: true

resources:
  Resources:
    TasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TASKS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
